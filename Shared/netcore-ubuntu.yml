

parameters:

  - name: usePreRelease
    type: boolean
    default: false

  - name: preBuildSteps
    type: stepList

  - name: projectPath
    type: string

  - name: tempFolderName
    type: string

  - name: service
    type: object
    
  - name: configs
    type: object

stages:
  - stage: CI
    jobs:
      - job: DotNet
        steps:

        - task: UseDotNet@2
          displayName: 'Use .NET Core sdk'
          condition: ${{ parameters.usePreRelease }}
          inputs:
            packageType: sdk
            includePreviewVersions: true
            version: 5.0.100-preview.4.20258.7
            installationPath: $(Agent.ToolsDirectory)/dotnet
        
        - ${{ each step in parameters.preBuildSteps  }}:
            - ${{ each pair in step }}:
                ${{ pair.key }}: ${{ pair.value }}

        - task: DotNetCoreCLI@2
          inputs:
            command: 'publish'
            zipAfterPublish: true
            projects: ${{ parameters.projectPath }}
            arguments: '-o $(Build.ArtifactStagingDirectory)/toDeploy'

        - script: |
            cp pipelines/linux.service $(Build.ArtifactStagingDirectory)/toDeploy
          displayName: 'Copy Linux Service'

        - task: PublishBuildArtifacts@1
          displayName: 'Prep for release'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'

  - stage: DeployDev
    displayName: 'Deploy to Development'

    jobs:
      - deployment: ShowConfig
        environment:
          name: Development
          resourceType: VirtualMachine
          resourceName: websites
        strategy:
          runOnce:
            deploy:
              steps:

                - script: |
                    mkdir $(Pipeline.Workspace)/prep
                    cp -a $(Pipeline.Workspace)/drop/toDeploy/. $(Pipeline.Workspace)/prep
                    cd $(Pipeline.Workspace)/prep
                    sed -i 's/#{service.port}#/${{ parameters.service.port }}/' linux.service
                    sed -i 's/#{service.dll}#/${{ parameters.service.dll }}/' linux.service
                    sed -i 's/#{service.directory}#/${{ parameters.service.directory }}/g' linux.service
                  displayName: Copy service file
                
                - ${{ each config in parameters.configs }}:
                  - script: 'echo "Environment=${{ config.key }}=''${{ config.value }}''" >> $(Pipeline.Workspace)/prep/linux.service'
                    displayName: Adding configuration for ${{ config.key }}

                - script: |
                    cd prep
                    sudo rm -rf ${{ parameters.service.directory }}
                    sudo unzip Socially.WebAPI.zip -d ${{ parameters.service.directory }}

                    sudo mv linux.service /etc/systemd/system/${{ parameters.service.name }}.service -f

                    sudo systemctl enable ${{ parameters.service.name }}.service 
                    sudo systemctl stop ${{ parameters.service.name }}.service 
                    sudo systemctl start ${{ parameters.service.name }}.service

                    cd ..
                    rm -rf $(Pipeline.Workspace)/prep
                  displayName: Updating website
                
            
    